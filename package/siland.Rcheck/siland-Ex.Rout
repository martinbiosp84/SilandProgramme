
R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "siland"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('siland')
Loading required package: lme4
Loading required package: Matrix
Loading required package: sp
Loading required package: raster
Loading required package: rgdal
rgdal: version: 1.2-16, (SVN revision 701)
 Geospatial Data Abstraction Library extensions to R successfully loaded
 Loaded GDAL runtime: GDAL 1.10.1, released 2013/08/26
 Path to GDAL shared files: /usr/share/gdal/1.10
 GDAL binary built with GEOS: TRUE 
 Loaded PROJ.4 runtime: Rel. 4.8.0, 6 March 2012, [PJ_VERSION: 480]
 Path to PROJ.4 shared files: (autodetected)
 Linking to sp version: 1.2-5 
Loading required package: fields
Loading required package: spam
Loading required package: dotCall64
Loading required package: grid
Spam version 2.1-2 (2017-12-21) is loaded.
Type 'help( Spam)' or 'demo( spam)' for a short introduction 
and overview of this package.
Help for individual functions is also obtained by adding the
suffix '.spam' to the function name, e.g. 'help( chol.spam)'.

Attaching package: ‘spam’

The following objects are masked from ‘package:base’:

    backsolve, forwardsolve

Loading required package: maps
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("dataSiland")
> ### * dataSiland
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dataSiland
> ### Title: A simulated data set that reprsents observations.
> ### Aliases: dataSiland
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(dataSiland)
> data(landSiland)
> nrow(dataSiland)
[1] 12
> #Plot for landscape variables
> plot(landSiland[[1]],col=2,pch=".")
> points(landSiland[[2]],col=3,pch=".")
> #Locations of observations
> points(dataSiland[,c("X","Y")])
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("landSiland")
> ### * landSiland
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: landSiland
> ### Title: A list of simulated data sets that describes landscape.
> ### Aliases: landSiland
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(landSiland)
> names(landSiland)
[1] "L1" "L2"
> #locations for the two landscape variables b1 and b2
> plot(landSiland[[1]],col=2,pch=".")
> points(landSiland[[2]],col=3,pch=".")
> 
> 
> 
> cleanEx()
> nameEx("plotcontri")
> ### * plotcontri
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotcontri
> ### Title: Plot contributions
> ### Aliases: plotcontri
> 
> ### ** Examples
> 
> data(landSiland)
> data(dataSiland)
> res=siland(y~locvar,land=landSiland,data=dataSiland,sif="exponential",family=gaussian)
> plotcontri(res,landSiland,dataSiland,type=1)
NULL
> plotcontri(res,landSiland,dataSiland,numvar=2)
NULL
> 
> 
> 
> cleanEx()
> nameEx("plotsif")
> ### * plotsif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotsif
> ### Title: Plot density and cumultive density for sif function
> ### Aliases: plotsif
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> cleanEx()
> nameEx("plotsiland")
> ### * plotsiland
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotsiland
> ### Title: Plot results from siland function
> ### Aliases: plotsiland
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("plotsiland.land")
> ### * plotsiland.land
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotsiland.land
> ### Title: Spatial representation of the landscape influence
> ### Aliases: plotsiland.land
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("plotsiland.sif")
> ### * plotsiland.sif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotsiland.sif
> ### Title: Plot the estimated spatial influence functions.
> ### Aliases: plotsiland.sif
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> ##---- Should be DIRECTLY executable !! ----
> ##-- ==>  Define data, use random,
> ##--	or do  help(data=index)  for the standard data sets.
> 
> 
> 
> 
> cleanEx()
> nameEx("siland")
> ### * siland
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: siland
> ### Title: Estimation of spatial influence of landscape
> ### Aliases: siland
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("siland.quantile")
> ### * siland.quantile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: siland.quantile
> ### Title: Quantile computation for spatial influence functions
> ### Aliases: siland.quantile
> 
> ### ** Examples
> 
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.814 6.048 3.07 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
